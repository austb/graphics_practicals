shaderSource[document.currentScript.src.split('js/shaders/')[1]] = `
  precision highp float;

  uniform sampler2D colorTexture;
  uniform mat4 textureProjMatrix;
  uniform float uAlpha;
  uniform vec3 uCameraPos;

  uniform mat4 rotateMat;

  // Light
  uniform vec4 lightPos[10]; // xyz is the direction, w is 0
  uniform vec4 lightPowerDensity[10]; // w ignored
  uniform vec3 uAmbientLight;
  uniform vec3 uMaterialShinyColor;
  uniform highp float uShinyFactor;
  uniform float uRenderAsShadow;

  varying vec2 texCoord;
  varying vec3 worldPos;
  varying vec3 worldNormal;

  float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
  }

  float noise(vec2 n) {
    const vec2 d = vec2(0.0, 1.0);
    vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));
    return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);
  }

  void main(void) {

    vec3 diffuseComponent;
    vec3 shinyComponent;
    vec3 viewDir = normalize(uCameraPos - worldPos);
    vec3 normalizedWorldNormal = normalize(worldNormal + vec3(100.0 * noise(worldNormal.xz), 0.0, noise(worldNormal.zx)));

    for(int i = 0; i < 10; i++) {
      vec3 lightDirection = lightPos[i].xyz - (worldPos * lightPos[i].w);

      highp float powerMagnitude = 1.0 / dot(lightDirection, lightDirection);
      vec3 powerMag = lightPowerDensity[i].xyz * powerMagnitude;

      highp float directionalComponent = max(dot(normalize(lightDirection), normalizedWorldNormal), 0.0);
      diffuseComponent += powerMag * directionalComponent;

      vec3 halfway = normalize(viewDir + normalize(lightDirection));
      shinyComponent += powerMag * uMaterialShinyColor * pow(max(dot(normalizedWorldNormal, halfway), 0.0), uShinyFactor);
    }

    float n = 10.0;
    highp float procedural_g = (n + sin((worldPos.x / 2.0 + noise(vec2(worldPos.x * 1.0, worldPos.z * 1.0)) / 1.2) * 10.0)) / (n + 1.0);


    vec3 color = vec3(0.93, 0.788, 0.686);
    //color = vec3(0.388, 0.788, 0.0);
    gl_FragColor = vec4((color * procedural_g) * (uAmbientLight + diffuseComponent) + shinyComponent, 1.0);
  }
`;
