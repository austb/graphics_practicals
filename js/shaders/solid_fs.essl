shaderSource[document.currentScript.src.split('js/shaders/')[1]] = `
  precision highp float;

  uniform sampler2D colorTexture;
  uniform mat4 textureProjMatrix;
  uniform float uAlpha;
  uniform vec3 uCameraPos;

  // Light
  uniform vec4 lightPos[10]; // xyz is the direction, w is 0
  uniform vec4 lightPowerDensity[10]; // w ignored
  uniform vec3 uAmbientLight;
  uniform vec3 uMaterialShinyColor;
  uniform highp float uShinyFactor;
  uniform float uRenderShadow;

  varying vec2 texCoord;
  varying vec3 worldPos;
  varying vec3 worldNormal;

  void main(void) {

    if(uRenderShadow == 1.0) {
      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
    } else {
      vec3 diffuseComponent;
      vec3 shinyComponent;
      vec3 viewDir = normalize(uCameraPos - worldPos);
      vec3 normalizedWorldNormal = normalize(worldNormal);

      for(int i = 0; i < 10; i++) {
        vec3 lightDirection = lightPos[i].xyz - (worldPos * lightPos[i].w);

        highp float powerMagnitude = 1.0 / dot(lightDirection, lightDirection);
        vec3 powerMag = lightPowerDensity[i].xyz * powerMagnitude;

        highp float directionalComponent = max(dot(normalize(lightDirection), normalizedWorldNormal), 0.0);
        diffuseComponent += powerMag * directionalComponent;

        vec3 halfway = normalize(viewDir + normalize(lightDirection));
        shinyComponent += powerMag * uMaterialShinyColor * pow(max(dot(normalizedWorldNormal, halfway), 0.0), uShinyFactor);
      }

      vec4 scaledTexture = vec4(texCoord, 0.0, 1.0) * textureProjMatrix;
      vec4 textureColor = texture2D(colorTexture, vec2(scaledTexture.x, scaledTexture.y));
      gl_FragColor = vec4(textureColor.rgb * (uAmbientLight + diffuseComponent) + shinyComponent, textureColor.a * uAlpha);
    }
  }
`;
